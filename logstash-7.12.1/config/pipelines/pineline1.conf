input {
    file {
        path => "/home/ubuntu/elk/logstash-7.12.1/event-data/apacdfdfhe_*.log"
        start_position => "beginning"
    }

    file {
        path => "/home/ubuntu/elk/logstash-7.12.1/event-data/java_errors.log"
        start_position => "beginning"
        # codec: Đây là một phần của plugin file để xử lý dữ liệu được đọc từ tập tin log. Trong trường hợp này, sử dụng codec multiline để xử lý dòng log nhiều dòng (multiline). Điều này phù hợp với logs lỗi của Java khi chúng thường có các stack trace dài.
        codec => multiline {
            # Đây là biểu thức xác định các dòng nào thuộc cùng một sự kiện. Các dòng bắt đầu bằng dấu cách (\s+), tab (\t) hoặc văn bản "Caused by:" sẽ được coi là thuộc cùng một sự kiện.
            pattern => "^(\s+|\t)|(Caused by:)"
            # what: Xác định làm thế nào khi gặp một dòng mới. Trong trường hợp này, giá trị "previous" cho biết Logstash sẽ gán dòng hiện tại cho sự kiện trước đó nếu dòng hiện tại phù hợp với pattern.
            what => "previous"

            auto_flush_interval => 5
        }
    }
}

filter {
    if [headers][request_path] =~ "error" or [path] =~ "errors" {
        mutate {
            replace => { type => "error"}
        }
        grok {
			match => { "message" => "%{CATALINA_DATESTAMP:[@metadata][timestamp]} %{LOGLEVEL:level} %{JAVACLASS:class}: (?<msg>.+?(?=(\r\n|\r|\n)))" }
		}

        date {
            match => [ "[@metadata][timestamp]", "MMM dd, yyyy HH:mm:ss a"]
        }
    } else {
        mutate {
            replace => { type => "accesss"}
        }

        grok {
            match => { "message" => '%{HTTPD_COMBINEDLOG }' }
        }

        if "_grokparsefailure" in [tags] {
            drop {}
        }

        useragent {
            source => "agent"
            target => "ua"
        }

        if [request] =~ /^\/admin\// {
            drop { }
        }

        if [request] =~ /^\/js\// or [request] =~ /^\/css\// or [request] in ["/robots.txt", "/favicon.ico"] {
            drop { }
        }

        mutate {
            convert => {
                "response" => "integer"
                "bytes" => "integer"
            }
        }

        date {
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
            remove_field => ["timestamp"]
        }
        
        # Crawlers
        if [ua][device] == "Spider" {
            drop { }
        }

        geoip {
            source => "clientip"
        }
    }

    mutate {
        remove_field => ["headers", "@version", "host"]
    }
}

output {
    stdout {
        codec => rubydebug {
            metadata => true
        }
    }

    # file {
    #     path => "%{type}.log"
    # }

    # elasticsearch {
    #     hosts => ["localhost:9200"]
    #     # index => "%{type}-%{+YYYY.MM.dd}"
    #     document_type => "default"
    #     http_compression => true
    # }
}